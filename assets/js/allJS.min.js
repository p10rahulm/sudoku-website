class SudokuClass{constructor(){this.SudokuPrefill=new Array(81).fill(0),this.workElemArray=new Array(81).fill(511),this.workElemIndicesByLength=[0].concat(Array.from(Array(81),(e,o)=>o+900)),this.done=!1,this.toProcess=[],this.contradiction=!1,this.numProcessed=0}}class GameClass{constructor(){this.elemIndices={};for(let e=0;e<81;e++){const o=~~(e/9),t=e%9,n=3*~~(o/3)+~~(t/3);this.elemIndices[e]=[o,t,n]}this.indicesinRows=[],this.indicesinCols=[],this.indicesinBoxes=[],this.neighbours=[];for(let e=0;e<9;e++)this.indicesinRows[e]=[],this.indicesinCols[e]=[],this.indicesinBoxes[e]=[];for(let e=0;e<81;e++)this.indicesinRows[this.elemIndices[e][0]].push(e),this.indicesinCols[this.elemIndices[e][1]].push(e),this.indicesinBoxes[this.elemIndices[e][2]].push(e);for(let e=0;e<81;e++){const o=new Set(this.indicesinRows[this.elemIndices[e][0]].concat(this.indicesinCols[this.elemIndices[e][1]]).concat(this.indicesinBoxes[this.elemIndices[e][2]]));this.neighbours.push([...o].filter(o=>o!==e).sort((function(e,o){return e-o})))}}}class Iteration{constructor(e){this.startTime=performance.now(),this.stackdepth=0,this.solutionFound=!1,this.leastIndexIterationtimeTaken=0,this.copytimetaken=0,this.copyworkElemArrayTT=0,this.copyworkElemIndicesByLengthTT=0,this.copyprocessedTT=0,this.copyinitTT=0,this.copycontradictionTT=0,this.copyTotalTT=0,this.updateWEIBLTimeTaken=0,this.updateAdditionForElemsTimeTaken=0,this.addinputSudokuTT=0,this.AddInputTT=0,this.skpushTT=0,this.flTT=0,this.poppingTT=0,this.afterIsDoneTT=0,this.totalRunDFSTT=0,this.nflTT=0,this.AddInputDirectLoopTT=0,this.numIterations=0,this.numLoops=0,this.solutionFound=0,this.solvedSudoku=e}}function start(){drawFirstSudoku()}function buildFirstSudoku(){Game=new GameClass,Sudoku=new SudokuClass([]),startIter=new Iteration(Sudoku)}function buildSudoku(){Sudoku=new SudokuClass([]),startIter=new Iteration(Sudoku)}function drawFirstSudoku(){const e=document.getElementById("sudoku-box");removeChildren(e,["elem-options-holder","timer"]),drawSudoku(Sudoku,e,"input"),setAttributes(e.getElementsByTagName("input"))}function setAttributes(e){for(let o=0;o<e.length;o++){const t=e[o];t.id=o,t.addEventListener("click",createOptions,!1),t.setAttribute("size",1),t.setAttribute("maxlength",1),t.setAttribute("autocomplete","off"),t.readOnly=!0}}function copySudokuHeap(e,o){const t=performance.now(),n=performance.now(),r={};o.copyinitTT+=performance.now()-n;const i=performance.now();r.workElemArray=e.workElemArray.slice(0),o.copyworkElemArrayTT+=performance.now()-i;const s=performance.now();r.workElemIndicesByLength=e.workElemIndicesByLength.slice(0),o.copyworkElemIndicesByLengthTT+=performance.now()-s;const u=performance.now();r.toProcess=e.toProcess.slice(0),r.SudokuPrefill=e.SudokuPrefill.slice(0),o.copyprocessedTT+=performance.now()-u;const a=performance.now();return r.contradiction=e.contradiction,r.numProcessed=e.numProcessed,o.copycontradictionTT+=performance.now()-a,o.copyTotalTT+=performance.now()-t,r}function copySudoku(e){copyTotalTS=performance.now(),copyinitTS=performance.now();const o={};copyinitTT+=performance.now()-copyinitTS,copyworkElemArrayTS=performance.now(),o.workElemArray=e.workElemArray.slice(0),copyworkElemArrayTT+=performance.now()-copyworkElemArrayTS,copyworkElemIndicesByLengthTS=performance.now(),o.workElemIndicesByLength={};for(let t=1;t<10;t++)o.workElemIndicesByLength[t]=new Set(e.workElemIndicesByLength[t]);return copyworkElemIndicesByLengthTT+=performance.now()-copyworkElemIndicesByLengthTS,copyprocessedTS=performance.now(),o.toProcess=e.toProcess.slice(0),copyprocessedTT+=performance.now()-copyprocessedTS,copycontradictionTS=performance.now(),o.contradiction=e.contradiction,copycontradictionTT+=performance.now()-copycontradictionTS,copyTotalTT+=performance.now()-copyTotalTS,o}function dfsCreatorSudoku(){let e=new Iteration(Sudoku);const o=copySudokuHeap(Sudoku,e),t=[];t.push(o),e=runDFSSudokuIterativeHeap(t,e);let n=0;document.getElementById("verbose-time-results-option").checked&&(n=1);const r=document.getElementById("num-iterations-option").value;if(e.solutionFound){for(let o=0;o<r;o++){const t=new Iteration(Sudoku),n=copySudokuHeap(Sudoku,e),r=[];r.push(n),runDFSSudokuIterativeHeap(r,t),updateIter(e,t,o+2)}console.log("iteration=",e),doFinishedProcessing(e.solvedSudoku,e,1,0,n)}else doFinishedProcessing(Sudoku,e,0,0,n)}function updateIter(e,o,t){e.numIterations+=1,e.stackdepth=(t-1)*e.stackdepth/t+1/t*o.stackdepth,e.leastIndexIterationtimeTaken=(t-1)*e.leastIndexIterationtimeTaken/t+1/t*o.leastIndexIterationtimeTaken,e.copytimetaken=(t-1)*e.copytimetaken/t+1/t*o.copytimetaken,e.copyworkElemArrayTT=(t-1)*e.copyworkElemArrayTT/t+1/t*o.copyworkElemArrayTT,e.copyworkElemIndicesByLengthTT=(t-1)*e.copyworkElemIndicesByLengthTT/t+1/t*o.copyworkElemIndicesByLengthTT,e.copyprocessedTT=(t-1)*e.copyprocessedTT/t+1/t*o.copyprocessedTT,e.copyinitTT=(t-1)*e.copyinitTT/t+1/t*o.copyinitTT,e.copycontradictionTT=(t-1)*e.copycontradictionTT/t+1/t*o.copycontradictionTT,e.copyTotalTT=(t-1)*e.copyTotalTT/t+1/t*o.copyTotalTT,e.updateWEIBLTimeTaken=(t-1)*e.updateWEIBLTimeTaken/t+1/t*o.updateWEIBLTimeTaken,e.updateAdditionForElemsTimeTaken=(t-1)*e.updateAdditionForElemsTimeTaken/t+1/t*o.updateAdditionForElemsTimeTaken,e.addinputSudokuTT=(t-1)*e.addinputSudokuTT/t+1/t*o.addinputSudokuTT,e.AddInputTT=(t-1)*e.AddInputTT/t+1/t*o.AddInputTT,e.skpushTT=(t-1)*e.skpushTT/t+1/t*o.skpushTT,e.flTT=(t-1)*e.flTT/t+1/t*o.flTT,e.poppingTT=(t-1)*e.poppingTT/t+1/t*o.poppingTT,e.afterIsDoneTT=(t-1)*e.afterIsDoneTT/t+1/t*o.afterIsDoneTT,e.totalRunDFSTT=(t-1)*e.totalRunDFSTT/t+1/t*o.totalRunDFSTT,e.nflTT=(t-1)*e.nflTT/t+1/t*o.nflTT,e.AddInputDirectLoopTT=(t-1)*e.AddInputDirectLoopTT/t+1/t*o.AddInputDirectLoopTT,e.numLoops=((t-1)*e.numLoops+o.numLoops)/t}function runDFSSudokuRecursive(e){totalRunDFSTS=performance.now(),nflTS=performance.now(),poppingTS=performance.now();const o=e.pop();if(poppingTT+=performance.now()-poppingTS,solutionFound)return;if(isSudokuDone(o)){afterIsDoneTS=performance.now(),solutionFound=!0;const e=performance.now()-startTime,t=document.getElementById("output-boxes");removeChildren(t);const n=document.createElement("div");n.innerHTML="Solution: Done in ",n.className="output-heading",t.appendChild(n);const r=document.createElement("div"),i="solved in "+e+"ms.<br>totalRunDFSTT = "+totalRunDFSTT+"ms<br>non-for loop time taken = "+nflTT+"ms<br>for loop time taken = "+flTT+"ms<br><br><br>Non-forloop<br>least Index time taken = "+leastIndexIterationtimeTaken+"ms.<br>afterIsDoneTT = "+afterIsDoneTT+"ms<br>sudokuHolder popping time taken = "+poppingTT+"ms<br><br>Forloop<br>copy time taken = "+copytimetaken+"ms.<br>AddInputTT time taken = "+AddInputTT+"ms.<br>sudokuHolder push time taken = "+skpushTT+"ms.<br><br>Other pages:Deepdive<br>copy function: total time taken = "+copyTotalTT+"ms.<br>copy function: initialize time taken = "+copyinitTT+"ms.<br>copy function: workElemArray time taken = "+copyworkElemArrayTT+"ms.<br>copy function: workElemIndicesByLength time taken = "+copyworkElemIndicesByLengthTT+"ms.<br>copy function: processed time taken = "+copyprocessedTT+"ms.<br>copy function: contradiction time taken = "+copycontradictionTT+"ms.<br>updateWEIBL Function time taken = "+updateWEIBLTimeTaken+"ms.<br>function updateAdditionForElems time taken = "+updateAdditionForElemsTimeTaken+"ms.<br>function: addInputSudoku time taken = "+addinputSudokuTT+"ms.<br>";return r.innerHTML=i,r.className="output-heading",t.appendChild(r),console.log("sudoku done. sudoku = ",o),drawSudoku(o,t,"div"),afterIsDoneTT+=performance.now()-afterIsDoneTS,o}leastIndexIterationTS=performance.now();o.workElemIndicesByLength;let t=0;for(let e=1;e<=9&&!t;e++)0!==o.workElemIndicesByLength[e].size&&(t=e);const n=o.workElemIndicesByLength[t].values().next().value,r=getAllowedNumbersforIndex(n,o);leastIndexIterationtimeTaken+=performance.now()-leastIndexIterationTS,nflTT+=performance.now()-nflTS,flTS=performance.now();for(let t=0;t<r.length&&!solutionFound;t++){const i=r[t];copyTimeStart=performance.now();const s=copySudoku(o);copytimetaken+=performance.now()-copyTimeStart,AddInputTS=performance.now(),addInputSudoku(s,n,i,1),AddInputTT+=performance.now()-AddInputTS,skpushTS=performance.now(),s.contradiction||e.push(s),skpushTT+=performance.now()-skpushTS}flTT+=performance.now()-flTS,totalRunDFSTT+=performance.now()-totalRunDFSTS,runDFSSudokuRecursive(e)}function runDFSSudokuIterativeHeap(e,o){const t=performance.now();for(;0!=e.length&&!o.solutionFound;){o.numLoops++;const n=performance.now(),r=performance.now(),i=e.pop();if(o.poppingTT+=performance.now()-r,isSudokuDoneHeap(i,o))return o.totalRunDFSTT=performance.now()-t,o.solutionFound=!0,o.solvedSudoku=i,o;const s=performance.now();let u=delMinHeap(i.workElemIndicesByLength)%100,a=getAllowedNumbersforIndex(u,i);for(;1==a.length;)u=delMinHeap(i.workElemIndicesByLength)%100,a=getAllowedNumbersforIndex(u,i);if(0==a.length)continue;o.leastIndexIterationtimeTaken+=performance.now()-s,o.nflTT+=performance.now()-n;const d=performance.now();for(let t=0;t<a.length&&!o.solutionFound;t++){const n=a[t],r=performance.now(),s=copySudokuHeap(i,o);o.copytimetaken+=performance.now()-r;const d=performance.now();addInputSudokuHeap(s,u,n,1,o),o.AddInputTT+=performance.now()-d;const c=performance.now();for(;0!==s.toProcess.length;){const e=s.toProcess.pop();addInputSudokuHeap(s,e,getlog2for2Power(s.workElemArray[e]),1,o)}o.AddInputDirectLoopTT+=performance.now()-c;const l=performance.now();s.contradiction||e.push(s),o.skpushTT+=performance.now()-l}o.flTT+=performance.now()-d}return o.totalRunDFSTT=performance.now()-t,o.solutionFound=!1,o}function runDFSSudokuIterative(e){for(totalRunDFSTS=performance.now();0!=e.length&&!solutionFound;){nflTS=performance.now(),poppingTS=performance.now();const o=e.pop();if(poppingTT+=performance.now()-poppingTS,isSudokuDone(o)){totalRunDFSTT=performance.now()-totalRunDFSTS,solutionFound=!0,doFinishedProcessing(o,1,0);continue}leastIndexIterationTS=performance.now();o.workElemIndicesByLength;let t=0;for(let e=1;e<=9&&!t;e++)0!==o.workElemIndicesByLength[e].size&&(t=e);const n=o.workElemIndicesByLength[t].values().next().value,r=getAllowedNumbersforIndex(n,o);leastIndexIterationtimeTaken+=performance.now()-leastIndexIterationTS,nflTT+=performance.now()-nflTS,flTS=performance.now();for(let t=0;t<r.length&&!solutionFound;t++){const i=r[t];copyTimeStart=performance.now();const s=copySudoku(o);for(copytimetaken+=performance.now()-copyTimeStart,AddInputTS=performance.now(),addInputSudoku(s,n,i,1),AddInputTT+=performance.now()-AddInputTS,AddInputDirectLoopTS=performance.now();0!==s.toProcess.length;){const e=s.toProcess.pop();addInputSudoku(s,e,getlog2for2Power(s.workElemArray[e]),1)}AddInputDirectLoopTT+=performance.now()-AddInputDirectLoopTS,skpushTS=performance.now(),s.contradiction||e.push(s),skpushTT+=performance.now()-skpushTS}flTT+=performance.now()-flTS}solutionFound||doFinishedProcessing(runningSudoku,0,0)}function doFinishedProcessing(e,o,t,n=0,r=1){const i=document.getElementById("output-boxes");n||removeChildren(i);const s=document.createElement("div");s.innerHTML=t?"Solution:":"Solution could not be found",s.className="output-heading",i.appendChild(s);const u=document.createElement("div"),a=(performance.now()-o.startTime)/o.numIterations;let d=`<b>Finished ${o.numIterations} iterations. Average Time values below:</b><br>`;d+="Time Taken: "+a+"ms.<br>",console.log("iteration.numLoops=",o.numLoops),d+="Number of Guesses: "+(o.numLoops-1).toString()+".<br>",r&&(d+="totalRunDFSTT = "+o.totalRunDFSTT+"ms<br>",d+="non-for loop time taken = "+o.nflTT+"ms<br>",d+="for loop time taken = "+o.flTT+"ms<br><br><br>",d+="Non-forloop<br>",d+="least Index time taken = "+o.leastIndexIterationtimeTaken+"ms.<br>",d+="afterIsDoneTT = "+o.afterIsDoneTT+"ms<br>",d+="sudokuHolder popping time taken = "+o.poppingTT+"ms<br>",d+="<br>Forloop<br>",d+="copy time taken = "+o.copytimetaken+"ms.<br>",d+="AddInputTT time taken = "+o.AddInputTT+"ms.<br>",d+="DirectProcessing time taken = "+o.AddInputDirectLoopTT+"ms.<br>",d+="sudokuHolder push time taken = "+o.skpushTT+"ms.<br>",d+="<br>Other pages:Deepdive<br>",d+="copy function: total time taken = "+o.copyTotalTT+"ms.<br>",d+="copy function: initialize time taken = "+o.copyinitTT+"ms.<br>",d+="copy function: workElemArray time taken = "+o.copyworkElemArrayTT+"ms.<br>",d+="copy function: workElemIndicesByLength time taken = "+o.copyworkElemIndicesByLengthTT+"ms.<br>",d+="copy function: processed time taken = "+o.copyprocessedTT+"ms.<br>",d+="copy function: contradiction time taken = "+o.copycontradictionTT+"ms.<br>",d+="function updateheap time taken = "+o.updateWEIBLTimeTaken+"ms.<br>",d+="function updateAdditionForElems time taken = "+o.updateAdditionForElemsTimeTaken+"ms.<br>",d+="function: addInputSudoku time taken = "+o.addinputSudokuTT+"ms.<br>"),u.innerHTML=d,u.className="output-text",i.appendChild(u),console.log("Finished processing. Final sudoku = ",e,"Total Time Taken: "+a+"ms.<br>"),t&&drawSudoku(e,i,"div")}function createOptions(e){const o=Math.min(e.pageX,window.innerWidth-50),t=e.pageY,n=e.target.id,r=e.target.value,i=document.getElementById("elem-options-holder");if(i.classList.contains("visibleOptionsList"))return i.classList.remove("visibleOptionsList"),void i.classList.add("invisibleOptionsList");"INPUT"===e.target.nodeName&&"text"===e.target.type&&(r?createRemoveOption(o,t,n,r):createNumberOptions(o,t,n))}function createNumberOptions(e,o,t){const n=getAllowedNumbersforIndex(t,Sudoku),r=document.getElementById("elem-options-holder");if(r.removeAttribute("onclick"),removeChildren(r),0===n.length){let e=document.createElement("div");e.className="sudokuElem-number",e.innerHTML="No Options",r.appendChild(e)}for(let e=0;e<n.length;e++){let o=document.createElement("div");o.className="sudokuElem-number",o.innerHTML=n[e],r.appendChild(o),o.setAttribute("onclick","setValueofSudokuElemfromNumChoice("+t.valueOf()+","+n[e].valueOf()+")")}r.classList.add("visibleOptionsList"),r.classList.remove("invisibleOptionsList"),r.setAttribute("style","left: "+e+"px; top: "+o+"px;")}function createRemoveOption(e,o,t,n){const r=document.getElementById("elem-options-holder");removeChildren(r);let i=document.createElement("div");i.className="sudokuElem-number",i.innerHTML="Remove: "+n,r.appendChild(i),i.setAttribute("onclick","removeValueofSudokuElemfromNumChoice("+t.valueOf()+","+n.valueOf()+")"),r.classList.add("visibleOptionsList"),r.classList.remove("invisibleOptionsList"),r.setAttribute("style","left: "+e+"px; top: "+o+"px;")}function removeChildren(e,o=[]){for(let t=0;t<e.childNodes.length;){const n=e.childNodes[t];-1===o.indexOf(n.id)?e.removeChild(n):t++}}function setUIonOptionClick(){const e=document.getElementById("elem-options-holder");e.removeAttribute("onclick"),removeChildren(e),e.classList.remove("visibleOptionsList"),e.classList.add("invisibleOptionsList")}function setValueofSudokuElemfromNumChoice(e,o){document.getElementById("sudoku-box").getElementsByTagName("input")[e].value=o,setUIonOptionClick(),addInput(e,o.toString()),checkGameOver()}function removeValueofSudokuElemfromNumChoice(e,o){document.getElementById("sudoku-box").getElementsByTagName("input")[e].value="",setUIonOptionClick(),console.log("removing stuff"),console.log("Sudoku.PreFill = ",Sudoku.SudokuPrefill),console.log("Sudoku.workElemArray = ",Sudoku.workElemArray),removeInput(e,o),console.log("after removal"),console.log("Sudoku.PreFill = ",Sudoku.SudokuPrefill),console.log("Sudoku.workElemArray = ",Sudoku.workElemArray)}function clearOptionsDiv(){const e=document.getElementById("elem-options-holder");e.removeAttribute("onclick"),removeChildren(e),e.classList.remove("visibleOptionsList"),e.classList.add("invisibleOptionsList")}function drawSudoku(e,o,t){const n=document.createElement("div");n.className="gameBox-holder",o.appendChild(n);const r=document.createElement("div");r.className="gameBox",n.appendChild(r);for(let o=0;o<9;o++){const n=document.createElement("div");n.className="sudoku-box-row";for(let r=0;r<9;r++){const i=9*o+r,s=document.createElement(t);if(s.className="input-elem",0===o&&s.classList.add("outer-top"),2!==o&&5!==o||s.classList.add("inner-bottom"),3!==o&&6!==o||s.classList.add("inner-top"),8===o&&s.classList.add("outer-bottom"),0===r&&s.classList.add("outer-left"),2!==r&&5!==r||s.classList.add("inner-right"),3!==r&&6!==r||s.classList.add("inner-left"),8===r&&s.classList.add("outer-right"),"div"===t)s.innerHTML=getAllowedNumbersforIndex(i,e).join("");else{const o=e.SudokuPrefill[i];o&&(s.value=o,s.classList.add("pre-filled"))}n.appendChild(s)}r.appendChild(n)}}function toggleDisplay(e){divtoToggle=document.getElementById(e),divtoToggle.classList.contains("active")?(divtoToggle.classList.remove("active"),divtoToggle.classList.add("inactive"),divtoToggle.innerText.replace("Enter","Hide"),divtoToggle.innerText.replace("see","hide")):divtoToggle.classList.contains("inactive")&&(divtoToggle.classList.remove("inactive"),divtoToggle.classList.add("active"),divtoToggle.innerText.replace("Enter","Hide"),divtoToggle.innerText.replace("see","hide"))}function getSudokuInputs(e){return Array.from(e).map(e=>Number(e.value))}function inputfromText(){buildSudoku();const e=document.getElementById("sudoku-box");drawFirstSudoku();const o=document.getElementById("sudokuTextInput").value;if(null==o.match("^[0-9.]+$"))return void logError("Please Check the input you have entered");const t=e.getElementsByTagName("input");for(let e=0;e<Math.min(81,o.length);e++)"."!=o[e]?(t[e].value=o[e],addInput(e,o[e])):t[e].value=""}function addInput(e,o){logError("");const t=Number(e),n=Number(o);Sudoku.SudokuPrefill[t]=n,Sudoku=addInputSudokuHeap(Sudoku,t,n,0)}function removeInput(e,o){logError(""),document.getElementById(e).value="",Sudoku=deleteInputSudoku(Sudoku,e)}function addInputSudokuHeap(e,o,t,n=0,r=startIter){const i=performance.now(),s=powerofTwo(t-1);return updateAdditionForElemsHeap(e,Game.neighbours[o],o,s,r),e.contradiction||(e.workElemArray[o]=s,r.addinputSudokuTT+=performance.now()-i,e.numProcessed+=1),e}function addInputSudoku(e,o,t,n=0){addinputSudokuTS=performance.now();const r=powerofTwo(t-1);0==n&&(e.sudokuInputArray[o]=t);const[i,s,u]=Game.elemIndices[o],a=Game.indicesinRows[i],d=Game.indicesinCols[s],c=Game.indicesinBoxes[u];if(updateAdditionForElems(e,a,o,r),updateAdditionForElems(e,d,o,r),updateAdditionForElems(e,c,o,r),e.contradiction)return e;const l=e.workElemArray[o];e.workElemArray[o]=r;const m=bitCount(l);return e.workElemIndicesByLength[m].delete(o),addinputSudokuTT+=performance.now()-addinputSudokuTS,e.numProcessed+=1,e}function updateAdditionForElemsHeap(e,o,t,n,r=startIter){if(e.contradiction)return;const i=performance.now();for(let t=0;t<o.length;t++){const i=o[t],s=e.workElemArray[i],u=e.workElemArray[i]&~n;if(e.workElemArray[i]=u,0===u)return e.contradiction=!0,e;if(s!==u){const o=bitCount(u);1===o&&e.toProcess.push(i),updateHeap(e,i,o,u,r)}}r.updateAdditionForElemsTimeTaken+=performance.now()-i}function updateAdditionForElems(e,o,t,n){if(!e.contradiction){updateAdditionForElemsTS=performance.now();for(let r=0;r<o.length;r++){const i=o[r];if(i!==t){const o=e.workElemArray[i],t=e.workElemArray[i]&~n;if(e.workElemArray[i]=t,0===t)return e.contradiction=!0,e;o!==t&&(isPowerOf2(t)&&e.toProcess.push(i),updateWEIBL(e,i,o,t))}}updateAdditionForElemsTimeTaken+=performance.now()-updateAdditionForElemsTS}}function deleteInputSudoku(e,o){e.SudokuPrefill[o]=0;const t=Game.neighbours[o];e.workElemArray[o]=getWVfromSudkFilled(e,o);const n=e.SudokuPrefill;for(let o=0;o<t.length;o++){const r=t[o];n[r]||(e.workElemArray[r]=getWVfromSudkFilled(e,r))}return resetHeap(e),e.numProcessed-=1,e}function getWVfromSudkFilled(e,o){return getAllowedWorkingVal(Game.neighbours[o],e.SudokuPrefill)}function getAllowedWorkingVal(e,o){return e.reduce((function(e,t,n,r){return o[t]?e&~powerofTwo(o[t]-1):e}),511)}function andNot(e,o){return e&~o}function updateDeletionforElems(e,o,t,n,r){let i=r;for(let r=0;r<o.length;r++){const s=o[r];if(s!=t){const o=e.SudokuPrefill[s];if(o){i&=~powerofTwo(o-1)}else e.workElemArray[s]=e.workElemArray[s]|n}}return i}function updateHeap(e,o,t,n,r=startIter){const i=performance.now(),s=100*t+o;addToHeap(e.workElemIndicesByLength,s),r.updateWEIBLTimeTaken+=performance.now()-i}function updateWEIBL(e,o,t,n){updateWEIBLTimeStart=performance.now();const r=bitCount(t);e.workElemIndicesByLength[r].delete(o);const i=bitCount(n);e.workElemIndicesByLength[i].add(o),updateWEIBLTimeTaken+=performance.now()-updateWEIBLTimeStart}function resetHeap(e){e.workElemIndicesByLength=[];for(let o=0;o<81;o++)if(!e.SudokuPrefill[o]){const t=100*bitCount(e.workElemArray[o])+o;addToHeap(e.workElemIndicesByLength,t)}}function logError(e){if(""==e){return void removeChildren(document.getElementById("output-errors"))}newError=document.createElement("div"),newError.className="output-error",newError.innerHTML=e,newErrorHeading=document.createElement("div"),newErrorHeading.className="output-heading",newErrorHeading.innerHTML="Error Message";const o=document.getElementById("output-errors");removeChildren(o),o.appendChild(newErrorHeading),o.appendChild(newError)}function getRandomIntBetween(e,o){return Math.floor(Math.random()*(o-e)+e)}function getRandomIntBelow(e){return Math.floor(Math.random()*Math.floor(e))}function isPowerOf2(e){return e&&!(e&e-1)}function getlog2for2Power(e){switch(e){case 1:return 1;case 2:return 2;case 4:return 3;case 8:return 4;case 16:return 5;case 32:return 6;case 64:return 7;case 128:return 8;case 256:return 9}}function bitCount(e){return 16843009*((e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135)>>24}function getAllowedNumbersforIndex(e,o){if(e<0)return[];let t=o.workElemArray[e];outNumbers=[];for(let e=0;e<9;e++)!0&t&&outNumbers.push(e+1),t>>=1;return outNumbers}function powerofTwo(e){return 1<<e}function isSudokuDone(e){if(solutionFound)return!0;let o=!0;for(let t=2;t<=9&&o;t++)0!==e.workElemIndicesByLength[t].size&&(o=!1);return o}function isSudokuDoneHeap(e,o){return!!(o.solutionFound||e.numProcessed>=81)}function addToHeap(e,o){e.push(o),heapifyUP(e,e.length-1)}function heapifyUP(e,o){if(o<=1)return;const t=~~(o/2);e[t]<=e[o]||(swap(e,t,o),heapifyUP(e,t))}function delMinHeap(e){if(e.length<=1)return-1;const o=e[1];return e[1]=e[e.length-1],e.pop(),heapifyDown(e,1),o}function heapifyDown(e,o){const t=2*o,n=2*o+1,r=e.length;if(r<t)return;if(r<n)return void(e[t]<e[o]&&swap(e,t,o));let i;i=e[t]<e[n]?t:n,e[i]<e[o]&&(swap(e,i,o),heapifyDown(e,i))}function swap(e,o,t){const n=e[o];e[o]=e[t],e[t]=n}function dec2bin(e){return(e>>>0).toString(2)}function fillSudk(e,o=1){gameLevel=o;let t,n,r=!1,i=0;for(document.body.style.cursor="wait",UNIQSUDOKUSIZE=17,MINBRANCHUS=3;!r;){++i,buildSudoku();let e=0;const o=new Set;for(;e<UNIQSUDOKUSIZE;){const t=getRandomIntBelow(80),n=getAllowedNumbersforIndex(t,Sudoku);n.length<MINBRANCHUS||o.has(t)||(o.add(t),addInput(t,n[getRandomIntBelow(n.length)]),e++)}[t,n]=solutionExists(Sudoku),r=n}console.log("attempts to generate game:",i),t.SudokuPrefill=t.workElemArray.map(e=>getlog2for2Power(e));const s=removeElementsFromSolution(t,e);Sudoku=s,console.log("solution=",t),drawGameSudoku(Sudoku),document.body.style.cursor="default",timeStart=(new Date).getTime(),startTimer(timeStart),intervalTimer=setInterval((function(){startTimer(timeStart)}),1e3)}function removeElementsFromSolution(e,o){let t=81;const n=new Set;for(console.log("numToFill=",o);t>o;){const o=getRandomIntBelow(80);n.has(o)||(n.add(o),e=deleteInputSudoku(e,o),t--)}return e}function solutionExists(e){let o=new Iteration(e);const t=copySudokuHeap(e,o),n=[];return n.push(t),o=runDFSSudokuIterativeHeap(n,o),[o.solvedSudoku,o.solutionFound]}function startTimer(e){let o="Time Elapsed: ";o+=getTimeTextfromElapsedTime(((new Date).getTime()-e)/1e3|0),document.getElementById("timer").innerHTML=o}function getTimeTextfromElapsedTime(e){const o=e/86400|0,t=e/3600|0,n=e/60|0,r=e%60|0;let i="Time Elapsed: ";return o&&(i+=o+" days "),(o||t)&&(i+=("0"+t).slice(-2)+":"),i+=("0"+n).slice(-2)+":",i+=("0"+r).slice(-2),i}function checkSolution(e,o){for(let t=0;t<81;t++)if(!e.SudokuPrefill[t]&&bitCount(e.workElemArray[t])<o)return!1;return!0}function drawGameSudoku(){const e=document.getElementById("sudoku-box");removeChildren(e,["elem-options-holder","timer"]),drawSudoku(Sudoku,e,"input"),setGameAttributes(e.getElementsByTagName("input"))}function setGameAttributes(e){for(let o=0;o<e.length;o++){const t=e[o];t.id=o,t.classList.contains("pre-filled")||t.addEventListener("click",createOptions,!1),t.setAttribute("size",1),t.setAttribute("maxlength",1),t.setAttribute("autocomplete","off"),t.readOnly=!0}}function checkGameOver(){console.log("Sudoku.numProcessed=",Sudoku.numProcessed),Sudoku.numProcessed>=81&&(console.log("Sudoku Done!"),clearInterval(intervalTimer),setStorageTimes(),displayStorageTimes(),toggleDisplay("sudoku-box-holder"),toggleDisplay("congratulations-box-holder"))}function displayStorageTimes(){const e=localStorage.getItem("last-time-val"),o=localStorage.getItem("best-time-easy"),t=localStorage.getItem("best-time-medium"),n=localStorage.getItem("best-time-hard");document.getElementById("today-time").innerHTML=getTimeTextfromElapsedTime(e),null!==o&&(document.getElementById("easy-best-time").innerHTML=getTimeTextfromElapsedTime(o)),null!==t&&(document.getElementById("medium-best-time").innerHTML=getTimeTextfromElapsedTime(t)),null!==n&&(document.getElementById("hard-best-time").innerHTML=getTimeTextfromElapsedTime(n))}function setStorageTimes(){const e=((new Date).getTime()-timeStart)/1e3|0;if(localStorage.setItem("last-time-val",e),localStorage.setItem("last-level",gameLevel),1===gameLevel){const o=localStorage.getItem("best-time-easy");o?localStorage.setItem("best-time-easy",Math.min(e,o)):localStorage.setItem("best-time-easy",e)}else if(2===gameLevel){const o=localStorage.getItem("best-time-medium");o?localStorage.setItem("best-time-medium",Math.min(e,o)):localStorage.setItem("best-time-medium",e)}else if(3===gameLevel){const o=localStorage.getItem("best-time-hard");o?localStorage.setItem("best-time-hard",Math.min(e,o)):localStorage.setItem("best-time-hard",e)}}buildFirstSudoku();